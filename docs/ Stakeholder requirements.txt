                                 Stakeholder requirements
                                  exam-security-project
  
Client side

GUI Requirements
    • The GUI will be implemented using Qt.
Session Management:
    • Include a button to start or end sessions. The button’s label shall update based on session status.
    • Disable temperature and relay controls until a session is active.
Temperature and Relay Controls:
    • A button to request and display the temperature from the ESP32.
    • A button to toggle the relay connected to pin 32.
Logging and Status Control:
    • Provide a button to clear logs.
    • Display logs, temperature, relay state, and other program details in a read-only area.
Serial Port Configuration:
    • Include a menu to list and allow users to select the serial port.

      
Communication requirement 

Serial Protocol Communication
    • The client and server shall communicate using a serial protocol with the ESP32.
Request-Response Mechanism
    • The client shall send requests and process responses efficiently.
    • The server must respond promptly.
    • Server responses, such as temperature data and relay state, shall be displayed in the GUI.
Session Management
    • The client shall support establishing and closing sessions.
    • Sessions will expire after 1 minute of inactivity.
Error Handling
    • Handle errors such as failed connections or no server response.
    • Notify users of any communication issues via the GUI.
Serial Configuration
    • Allow users to select and configure the serial port and baud rate.
Logging and Debugging
    • Use the server LED on pin 21 for debugging during development.
    • Display relay state, temperature readings, and program details in a read-only log area.


Security requirements 

Secure Communication
    • All communication between the client and server shall be encrypted using AES-256.
    • Encryption keys and initialization vectors (IVs) shall be securely shared using RSA-2048.
Data Integrity
    • HMAC-SHA256 shall be used to ensure the integrity of all messages sent between the client and server.
    • The client shall verify the HMAC signature of responses received from the server.
Shared Secret Management
    • A shared secret key shall be used for HMAC operations.
    • The client shall securely store and use this key for signing and verifying messages.
Session Security
    • The client shall generate and exchange AES-256 session keys with the server at the start of communication.
    • Session keys shall only be valid for the duration of the session.
Secure Key Storage
    • The client shall ensure encryption keys, secrets, and initialization vectors (IVs) are not exposed in plain text.
    • Any sensitive security data (for example, keys or secrets) shall be stored in memory securely.
Security Event Logging
    • Log all security-related events, such as:
        ◦ Encryption and decryption operations.
        ◦ HMAC verification failures.
        ◦ Key exchange successes or failures.
    • Display critical security notifications in the GUI for example, HMAC verification failure or encryption errors.
Error Handling
    • Handle errors related to encryption, decryption, and key exchanges, such as:
        ◦ Invalid HMAC signatures.
        ◦ Failed encryption or decryption operations.
    • Notify the user of critical security issues via the GUI.




Server side

Server Stakeholder Requirements
General Requirements

    Hardware Integration
        Use an ESP32 as the hardware platform for server implementation.
        Control an LED connected to pin 21 for status indication and debugging purposes.
        Toggle a relay connected to pin 32 based on client requests.
    Session Management
        Support establishing, maintaining, and terminating a single session at a time.
        Automatically terminate sessions after 1 minute of inactivity.

Communication Requirements

    Serial Communication
        Communicate with the client over a serial connection.
        Implement a request-response protocol to handle incoming client requests and provide appropriate responses.
        Send responses promptly, including:
            Temperature readings.
            Relay state changes.
        Support client-side serial port configuration by handling various baud rates.

    Error Handling
        Handle and log communication errors, such as:
            Failed serial communication.
            Invalid or unrecognized requests.
        Provide status feedback to the client through LED indications and logs.

Temperature and Relay Controls

    Temperature Management
        Measure and provide temperature data from the ESP32 sensor.
        Send temperature readings to the client upon request.
    Relay Management
        Control a relay connected to pin 32.
        Update and communicate the relay state (on/off) to the client.

Security Requirements

    Secure Communication
        Encrypt all communication with the client using AES-256.
        Perform key exchanges using RSA-2048 for secure AES-256 session keys and initialization vectors (IVs).

    Data Integrity
        Use HMAC-SHA256 for all messages to ensure data integrity.
        Verify the HMAC signatures of incoming client requests and reject tampered data.

    Shared Secret Management
        Use the shared secret key (Fj2;wu3Ur=ARl2Tq6luKM3nGj8z1+) for HMAC operations.
        Ensure the secret key is securely stored and never exposed in plain text.

    Key Exchange
        Generate and exchange AES-256 keys and initialization vectors (IVs) with the client at the start of the session.
        Ensure secure and error-free key exchange using RSA-2048.

    Error Handling
        Handle encryption and decryption errors, including:
            Invalid HMAC signatures.
            Failed key exchanges or encryption operations.
        Notify the client of critical security issues through the protocol.

Logging and Debugging

    Debugging Tools
        Use the LED on pin 21 for debugging purposes, such as:
            Indicating server status for example, active session, communication errors.
        Log all security-related events, including:
            HMAC verification failures.
            Key exchange successes or failures.
            Encryption and decryption operations.
    Communication Logs
        Maintain logs of all incoming and outgoing requests, including their success or failure.

Error Handling

    Session Management
        Ensure that only one session is active at a time.
        Handle cases where a client fails to terminate a session properly example timeout.
    Communication Errors
        Log and handle any failed requests due to serial or protocol errors.
        Provide meaningful status information to assist in debugging.
